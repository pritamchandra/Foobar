# 1
Given a string replace the lower case letters with their alphabetical conjugates, i.e. a - z,
b - y, and so on. [O(n) solution]

# 2.1
Given a list of n elements find the sublist with maximum product. The abs(element) < 1000, 
[O(n) solution]

# 2.2
Given a list of n digits from 0 - 9 find the largest number divisible by 3 that can be made out of
elements of the list. [O(n^2) solution]

# 3.1
If the first worker has ID 17 (start) and the checkpoint holds four (length) workers, the 
process would look like:
17 18 19 20 /
21 22 23 / 24
25 26 / 27 28
29 / 30 31 32
which produces the checksum 17^18^19^20^21^22^23^25^26^29 == 14.

All worker IDs (including the first worker) are between 0 and 2000000000 inclusive, and the checkpoint
line will always be at least 1 worker long.

# 3.2
And finally, you were only able to smuggle one of each type of bomb - one Mach, one Facula - 
aboard the ship when you arrived, so that's all you have to start with. (Thus it may be impossible 
to deploy the bombs to destroy the LAMBCHOP, but that's not going to stop you from trying!) 

You need to know how many replication cycles (generations) it will take to generate the correct 
amount of bombs to destroy the LAMBCHOP. Write a function solution(M, F) where M and F are the 
number of Mach and Facula bombs needed. Return the fewest number of generations (as a string) 
that need to pass before you'll have the exact number of bombs necessary to destroy the LAMBCHOP, 
or the string "impossible" if this can't be done! M and F will be string representations of 
positive integers no larger than 10^50. For example, if M = "2" and F = "1", one generation would
need to pass, so the solution would be "1". However, if M = "2" and F = "4", it would not be possible


# 3.3
Count the number of partitions of an integer into distinct parts.

# 4.1
You and your rescued bunny prisoners need to get out of this collapsing death trap of a space station - 
and fast! Unfortunately, some of the bunnies have been weakened by their long imprisonment and can't 
run very fast. Their friends are trying to help them, but this escape would go a lot faster if you
also pitched in. The defensive bulkhead doors have begun to close, and if you don't make it through in 
time, you'll be trapped! You need to grab as many bunnies as you can and get through the bulkheads 
before they close. 

The time it takes to move from your starting point to all of the bunnies and to the bulkhead will be 
given to you in a square matrix of integers. Each row will tell you the time it takes to get to the
start, first bunny, second bunny, ..., last bunny, and the bulkhead in that order. The order of the 
rows follows the same pattern (start, each bunny, bulkhead). The bunnies can jump into your arms, 
so picking them up is instantaneous, and arriving at the bulkhead at the same time as it seals still 
allows for a successful, if dramatic, escape. (Don't worry, any bunnies you don't pick up will be 
able to escape with you since they no longer have to carry the ones you did pick up.) You can revisit 
different spots if you wish, and moving to the bulkhead doesn't mean you have to immediately leave -
you can move to and from the bulkhead to pick up additional bunnies if time permits.

In addition to spending time traveling between bunnies, some paths interact with the space station's
security checkpoints and add time back to the clock. Adding time to the clock will delay the closing 
of the bulkhead doors, and if the time goes back up to 0 or a positive number after the doors have
already closed, it triggers the bulkhead to reopen. Therefore, it might be possible to walk in a 
circle and keep gaining time: that is, each time a path is traversed, the same amount of time is used 
or added.

Write a function of the form solution(times, time_limit) to calculate the most bunnies you can pick up
and which bunnies they are, while still escaping through the bulkhead before the doors close for good. 
If there are multiple sets of bunnies of the same size, return the set of bunnies with the lowest 
prisoner IDs (as indexes) in sorted order. The bunnies are represented as a sorted list by prisoner ID,
with the first bunny being 0. There are at most 5 bunnies, and time_limit is a non-negative integer 
that is at most 999.

For instance, in the case of
[
  [0, 2, 2, 2, -1],  # 0 = Start
  [9, 0, 2, 2, -1],  # 1 = Bunny 0
  [9, 3, 0, 2, -1],  # 2 = Bunny 1
  [9, 3, 2, 0, -1],  # 3 = Bunny 2
  [9, 3, 2, 2,  0],  # 4 = Bulkhead
]
and a time limit of 1, the five inner array rows designate the starting point, bunny 0, bunny 1, bunny 2, 
and the bulkhead door exit respectively. You could take the path:

Start End Delta Time Status
    -   0     -    1 Bulkhead initially open
    0   4    -1    2
    4   2     2    0
    2   4    -1    1
    4   3     2   -1 Bulkhead closes
    3   4    -1    0 Bulkhead reopens; you and the bunnies exit

With this solution, you would pick up bunnies 1 and 2. This is the best combination for this space station
hallway, so the answer is [1, 2].

# 4.2
You've blown up the LAMBCHOP doomsday device and broken the bunnies out of Lambda's prison - and now you
need to escape from the space station as quickly and as orderly as possible! The bunnies have all gathered
in various locations throughout the station, and need to make their way towards the seemingly endless amount 
of escape pods positioned in other parts of the station. You need to get the numerous bunnies through the 
various rooms to the escape pods. Unfortunately, the corridors between the rooms can only fit so many bunnies
at a time. What's more, many of the corridors were resized to accommodate the LAMBCHOP, so they vary inhow 
many bunnies can move through them at a time. 

Given the starting room numbers of the groups of bunnies, the room numbers of the escape pods, and how many
bunnies can fit through at a time in each direction of every corridor in between, figure out how many bunnies
can safely make it to the escape pods at a time at peak.

Write a function solution(entrances, exits, path) that takes an array of integers denoting where the groups
of gathered bunnies are, an array of integers denoting where the escape pods are located, and an array of 
an array of integers of the corridors, returning the total number of bunnies that can get through at each 
time step as an int. The entrances and exits are disjoint and thus will never overlap. The path element 
path[A][B] = C describes that the corridor going from A to B can fit C bunnies at each time step.  There
are at most 50 rooms connected by the corridors and at most 2000000 bunnies that will fit at a time.

For example, if you have:
entrances = [0, 1]
exits = [4, 5]
path = [
  [0, 0, 4, 6, 0, 0],  # Room 0: Bunnies
  [0, 0, 5, 2, 0, 0],  # Room 1: Bunnies
  [0, 0, 0, 0, 4, 4],  # Room 2: Intermediate room
  [0, 0, 0, 0, 6, 6],  # Room 3: Intermediate room
  [0, 0, 0, 0, 0, 0],  # Room 4: Escape pods
  [0, 0, 0, 0, 0, 0],  # Room 5: Escape pods
]

Then in each time step, the following might happen:
0 sends 4/4 bunnies to 2 and 6/6 bunnies to 3
1 sends 4/5 bunnies to 2 and 2/2 bunnies to 3
2 sends 4/4 bunnies to 4 and 4/4 bunnies to 5
3 sends 4/6 bunnies to 4 and 4/6 bunnies to 5

So, in total, 16 bunnies could make it to the escape pods at 4 and 5 at each time step.  (Note that in this 
example, room 3 could have sent any variation of 8 bunnies to 4 and 5, such as 2/6 and 6/6, but the final 
solution remains the same.)

# 5
Oh no! You've managed to escape Commander Lambdas collapsing space station in an escape pod with the rescued
bunny prisoners- but Commander Lambda isnt about to let you get away that easily. She's sent her elite
fighter pilot squadron after you - and they've opened fire!

Fortunately, you know something important about the ships trying to shoot you down. Back when you were still
Commander Lambdas assistant, she asked you to help program the aiming mechanisms for the starfighters. They 
undergo rigorous testing procedures, but you were still able to slip in a subtle bug. The software works as
a time step simulation: if it is tracking a target that is accelerating away at 45 degrees, the software 
will consider the targets acceleration to be equal to the square root of 2, adding the calculated result to
the targets end velocity at each timestep. However, thanks to your bug, instead of storing the result with 
proper precision, it will be truncated to an integer before adding the new velocity to your current position. 
This means that instead of having your correct position, the targeting software will erringly report your
position as sum(i=1..n, floor(i*sqrt(2))) - not far enough off to fail Commander Lambdas testing, but enough 
that it might just save your life.

If you can quickly calculate the target of the starfighters' laser beams to know how far off they'll be, you
can trick them into shooting an asteroid, releasing dust, and concealing the rest of your escape.  Write a 
function solution(str_n) which, given the string representation of an integer n, returns the sum of 
(floor(1*sqrt(2)) + floor(2*sqrt(2)) + ... + floor(n*sqrt(2))) as a string. That is, for every number i in the
range 1 to n, it adds up all of the integer portions of i*sqrt(2).

For example, if str_n was "5", the solution would be calculated as
floor(1*sqrt(2)) +
floor(2*sqrt(2)) +
floor(3*sqrt(2)) +
floor(4*sqrt(2)) +
floor(5*sqrt(2))
= 1+2+4+5+7 = 19
so the function would return "19".

str_n will be a positive integer between 1 and 10^100, inclusive. Since n can be very large (up to 101 digits!),
using just sqrt(2) and a loop won't work. Sometimes, it's easier to take a step back and concentrate not on what 
you have in front of you, but on what you don't.
